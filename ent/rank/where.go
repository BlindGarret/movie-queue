// Code generated by ent, DO NOT EDIT.

package rank

import (
	"entgo.io/ent/dialect/sql"
	"github.com/BlindGarret/movie-queue/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Rank {
	return predicate.Rank(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Rank {
	return predicate.Rank(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Rank {
	return predicate.Rank(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Rank {
	return predicate.Rank(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Rank {
	return predicate.Rank(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Rank {
	return predicate.Rank(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Rank {
	return predicate.Rank(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Rank {
	return predicate.Rank(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Rank {
	return predicate.Rank(sql.FieldLTE(FieldID, id))
}

// Next applies equality check predicate on the "next" field. It's identical to NextEQ.
func Next(v string) predicate.Rank {
	return predicate.Rank(sql.FieldEQ(FieldNext, v))
}

// NextEQ applies the EQ predicate on the "next" field.
func NextEQ(v string) predicate.Rank {
	return predicate.Rank(sql.FieldEQ(FieldNext, v))
}

// NextNEQ applies the NEQ predicate on the "next" field.
func NextNEQ(v string) predicate.Rank {
	return predicate.Rank(sql.FieldNEQ(FieldNext, v))
}

// NextIn applies the In predicate on the "next" field.
func NextIn(vs ...string) predicate.Rank {
	return predicate.Rank(sql.FieldIn(FieldNext, vs...))
}

// NextNotIn applies the NotIn predicate on the "next" field.
func NextNotIn(vs ...string) predicate.Rank {
	return predicate.Rank(sql.FieldNotIn(FieldNext, vs...))
}

// NextGT applies the GT predicate on the "next" field.
func NextGT(v string) predicate.Rank {
	return predicate.Rank(sql.FieldGT(FieldNext, v))
}

// NextGTE applies the GTE predicate on the "next" field.
func NextGTE(v string) predicate.Rank {
	return predicate.Rank(sql.FieldGTE(FieldNext, v))
}

// NextLT applies the LT predicate on the "next" field.
func NextLT(v string) predicate.Rank {
	return predicate.Rank(sql.FieldLT(FieldNext, v))
}

// NextLTE applies the LTE predicate on the "next" field.
func NextLTE(v string) predicate.Rank {
	return predicate.Rank(sql.FieldLTE(FieldNext, v))
}

// NextContains applies the Contains predicate on the "next" field.
func NextContains(v string) predicate.Rank {
	return predicate.Rank(sql.FieldContains(FieldNext, v))
}

// NextHasPrefix applies the HasPrefix predicate on the "next" field.
func NextHasPrefix(v string) predicate.Rank {
	return predicate.Rank(sql.FieldHasPrefix(FieldNext, v))
}

// NextHasSuffix applies the HasSuffix predicate on the "next" field.
func NextHasSuffix(v string) predicate.Rank {
	return predicate.Rank(sql.FieldHasSuffix(FieldNext, v))
}

// NextEqualFold applies the EqualFold predicate on the "next" field.
func NextEqualFold(v string) predicate.Rank {
	return predicate.Rank(sql.FieldEqualFold(FieldNext, v))
}

// NextContainsFold applies the ContainsFold predicate on the "next" field.
func NextContainsFold(v string) predicate.Rank {
	return predicate.Rank(sql.FieldContainsFold(FieldNext, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Rank) predicate.Rank {
	return predicate.Rank(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Rank) predicate.Rank {
	return predicate.Rank(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Rank) predicate.Rank {
	return predicate.Rank(sql.NotPredicates(p))
}
