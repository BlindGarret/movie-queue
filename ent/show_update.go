// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/BlindGarret/movie-queue/ent/predicate"
	"github.com/BlindGarret/movie-queue/ent/show"
)

// ShowUpdate is the builder for updating Show entities.
type ShowUpdate struct {
	config
	hooks    []Hook
	mutation *ShowMutation
}

// Where appends a list predicates to the ShowUpdate builder.
func (su *ShowUpdate) Where(ps ...predicate.Show) *ShowUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetName sets the "name" field.
func (su *ShowUpdate) SetName(s string) *ShowUpdate {
	su.mutation.SetName(s)
	return su
}

// SetNillableName sets the "name" field if the given value is not nil.
func (su *ShowUpdate) SetNillableName(s *string) *ShowUpdate {
	if s != nil {
		su.SetName(*s)
	}
	return su
}

// SetOrder sets the "order" field.
func (su *ShowUpdate) SetOrder(s string) *ShowUpdate {
	su.mutation.SetOrder(s)
	return su
}

// SetNillableOrder sets the "order" field if the given value is not nil.
func (su *ShowUpdate) SetNillableOrder(s *string) *ShowUpdate {
	if s != nil {
		su.SetOrder(*s)
	}
	return su
}

// SetType sets the "type" field.
func (su *ShowUpdate) SetType(s show.Type) *ShowUpdate {
	su.mutation.SetType(s)
	return su
}

// SetNillableType sets the "type" field if the given value is not nil.
func (su *ShowUpdate) SetNillableType(s *show.Type) *ShowUpdate {
	if s != nil {
		su.SetType(*s)
	}
	return su
}

// SetAddedDate sets the "addedDate" field.
func (su *ShowUpdate) SetAddedDate(t time.Time) *ShowUpdate {
	su.mutation.SetAddedDate(t)
	return su
}

// SetNillableAddedDate sets the "addedDate" field if the given value is not nil.
func (su *ShowUpdate) SetNillableAddedDate(t *time.Time) *ShowUpdate {
	if t != nil {
		su.SetAddedDate(*t)
	}
	return su
}

// Mutation returns the ShowMutation object of the builder.
func (su *ShowUpdate) Mutation() *ShowMutation {
	return su.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *ShowUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *ShowUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *ShowUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *ShowUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *ShowUpdate) check() error {
	if v, ok := su.mutation.GetType(); ok {
		if err := show.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Show.type": %w`, err)}
		}
	}
	return nil
}

func (su *ShowUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := su.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(show.Table, show.Columns, sqlgraph.NewFieldSpec(show.FieldID, field.TypeInt))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Name(); ok {
		_spec.SetField(show.FieldName, field.TypeString, value)
	}
	if value, ok := su.mutation.Order(); ok {
		_spec.SetField(show.FieldOrder, field.TypeString, value)
	}
	if value, ok := su.mutation.GetType(); ok {
		_spec.SetField(show.FieldType, field.TypeEnum, value)
	}
	if value, ok := su.mutation.AddedDate(); ok {
		_spec.SetField(show.FieldAddedDate, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{show.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// ShowUpdateOne is the builder for updating a single Show entity.
type ShowUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ShowMutation
}

// SetName sets the "name" field.
func (suo *ShowUpdateOne) SetName(s string) *ShowUpdateOne {
	suo.mutation.SetName(s)
	return suo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (suo *ShowUpdateOne) SetNillableName(s *string) *ShowUpdateOne {
	if s != nil {
		suo.SetName(*s)
	}
	return suo
}

// SetOrder sets the "order" field.
func (suo *ShowUpdateOne) SetOrder(s string) *ShowUpdateOne {
	suo.mutation.SetOrder(s)
	return suo
}

// SetNillableOrder sets the "order" field if the given value is not nil.
func (suo *ShowUpdateOne) SetNillableOrder(s *string) *ShowUpdateOne {
	if s != nil {
		suo.SetOrder(*s)
	}
	return suo
}

// SetType sets the "type" field.
func (suo *ShowUpdateOne) SetType(s show.Type) *ShowUpdateOne {
	suo.mutation.SetType(s)
	return suo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (suo *ShowUpdateOne) SetNillableType(s *show.Type) *ShowUpdateOne {
	if s != nil {
		suo.SetType(*s)
	}
	return suo
}

// SetAddedDate sets the "addedDate" field.
func (suo *ShowUpdateOne) SetAddedDate(t time.Time) *ShowUpdateOne {
	suo.mutation.SetAddedDate(t)
	return suo
}

// SetNillableAddedDate sets the "addedDate" field if the given value is not nil.
func (suo *ShowUpdateOne) SetNillableAddedDate(t *time.Time) *ShowUpdateOne {
	if t != nil {
		suo.SetAddedDate(*t)
	}
	return suo
}

// Mutation returns the ShowMutation object of the builder.
func (suo *ShowUpdateOne) Mutation() *ShowMutation {
	return suo.mutation
}

// Where appends a list predicates to the ShowUpdate builder.
func (suo *ShowUpdateOne) Where(ps ...predicate.Show) *ShowUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *ShowUpdateOne) Select(field string, fields ...string) *ShowUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Show entity.
func (suo *ShowUpdateOne) Save(ctx context.Context) (*Show, error) {
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *ShowUpdateOne) SaveX(ctx context.Context) *Show {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *ShowUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *ShowUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *ShowUpdateOne) check() error {
	if v, ok := suo.mutation.GetType(); ok {
		if err := show.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Show.type": %w`, err)}
		}
	}
	return nil
}

func (suo *ShowUpdateOne) sqlSave(ctx context.Context) (_node *Show, err error) {
	if err := suo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(show.Table, show.Columns, sqlgraph.NewFieldSpec(show.FieldID, field.TypeInt))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Show.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, show.FieldID)
		for _, f := range fields {
			if !show.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != show.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.Name(); ok {
		_spec.SetField(show.FieldName, field.TypeString, value)
	}
	if value, ok := suo.mutation.Order(); ok {
		_spec.SetField(show.FieldOrder, field.TypeString, value)
	}
	if value, ok := suo.mutation.GetType(); ok {
		_spec.SetField(show.FieldType, field.TypeEnum, value)
	}
	if value, ok := suo.mutation.AddedDate(); ok {
		_spec.SetField(show.FieldAddedDate, field.TypeTime, value)
	}
	_node = &Show{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{show.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
