// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/BlindGarret/movie-queue/ent/predicate"
	"github.com/BlindGarret/movie-queue/ent/rank"
	"github.com/BlindGarret/movie-queue/ent/show"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeRank = "Rank"
	TypeShow = "Show"
)

// RankMutation represents an operation that mutates the Rank nodes in the graph.
type RankMutation struct {
	config
	op            Op
	typ           string
	id            *int
	next          *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Rank, error)
	predicates    []predicate.Rank
}

var _ ent.Mutation = (*RankMutation)(nil)

// rankOption allows management of the mutation configuration using functional options.
type rankOption func(*RankMutation)

// newRankMutation creates new mutation for the Rank entity.
func newRankMutation(c config, op Op, opts ...rankOption) *RankMutation {
	m := &RankMutation{
		config:        c,
		op:            op,
		typ:           TypeRank,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRankID sets the ID field of the mutation.
func withRankID(id int) rankOption {
	return func(m *RankMutation) {
		var (
			err   error
			once  sync.Once
			value *Rank
		)
		m.oldValue = func(ctx context.Context) (*Rank, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Rank.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRank sets the old Rank of the mutation.
func withRank(node *Rank) rankOption {
	return func(m *RankMutation) {
		m.oldValue = func(context.Context) (*Rank, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RankMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RankMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *RankMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *RankMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Rank.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetNext sets the "next" field.
func (m *RankMutation) SetNext(s string) {
	m.next = &s
}

// Next returns the value of the "next" field in the mutation.
func (m *RankMutation) Next() (r string, exists bool) {
	v := m.next
	if v == nil {
		return
	}
	return *v, true
}

// OldNext returns the old "next" field's value of the Rank entity.
// If the Rank object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RankMutation) OldNext(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNext is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNext requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNext: %w", err)
	}
	return oldValue.Next, nil
}

// ResetNext resets all changes to the "next" field.
func (m *RankMutation) ResetNext() {
	m.next = nil
}

// Where appends a list predicates to the RankMutation builder.
func (m *RankMutation) Where(ps ...predicate.Rank) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the RankMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *RankMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Rank, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *RankMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *RankMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Rank).
func (m *RankMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *RankMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.next != nil {
		fields = append(fields, rank.FieldNext)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *RankMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case rank.FieldNext:
		return m.Next()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *RankMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case rank.FieldNext:
		return m.OldNext(ctx)
	}
	return nil, fmt.Errorf("unknown Rank field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RankMutation) SetField(name string, value ent.Value) error {
	switch name {
	case rank.FieldNext:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNext(v)
		return nil
	}
	return fmt.Errorf("unknown Rank field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *RankMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *RankMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RankMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Rank numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *RankMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *RankMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *RankMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Rank nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *RankMutation) ResetField(name string) error {
	switch name {
	case rank.FieldNext:
		m.ResetNext()
		return nil
	}
	return fmt.Errorf("unknown Rank field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *RankMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *RankMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *RankMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *RankMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *RankMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *RankMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *RankMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Rank unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *RankMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Rank edge %s", name)
}

// ShowMutation represents an operation that mutates the Show nodes in the graph.
type ShowMutation struct {
	config
	op            Op
	typ           string
	id            *int
	name          *string
	_order        *string
	_type         *show.Type
	addedDate     *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Show, error)
	predicates    []predicate.Show
}

var _ ent.Mutation = (*ShowMutation)(nil)

// showOption allows management of the mutation configuration using functional options.
type showOption func(*ShowMutation)

// newShowMutation creates new mutation for the Show entity.
func newShowMutation(c config, op Op, opts ...showOption) *ShowMutation {
	m := &ShowMutation{
		config:        c,
		op:            op,
		typ:           TypeShow,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withShowID sets the ID field of the mutation.
func withShowID(id int) showOption {
	return func(m *ShowMutation) {
		var (
			err   error
			once  sync.Once
			value *Show
		)
		m.oldValue = func(ctx context.Context) (*Show, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Show.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withShow sets the old Show of the mutation.
func withShow(node *Show) showOption {
	return func(m *ShowMutation) {
		m.oldValue = func(context.Context) (*Show, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ShowMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ShowMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ShowMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ShowMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Show.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *ShowMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ShowMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Show entity.
// If the Show object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShowMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ShowMutation) ResetName() {
	m.name = nil
}

// SetOrder sets the "order" field.
func (m *ShowMutation) SetOrder(s string) {
	m._order = &s
}

// Order returns the value of the "order" field in the mutation.
func (m *ShowMutation) Order() (r string, exists bool) {
	v := m._order
	if v == nil {
		return
	}
	return *v, true
}

// OldOrder returns the old "order" field's value of the Show entity.
// If the Show object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShowMutation) OldOrder(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrder is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrder requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrder: %w", err)
	}
	return oldValue.Order, nil
}

// ResetOrder resets all changes to the "order" field.
func (m *ShowMutation) ResetOrder() {
	m._order = nil
}

// SetType sets the "type" field.
func (m *ShowMutation) SetType(s show.Type) {
	m._type = &s
}

// GetType returns the value of the "type" field in the mutation.
func (m *ShowMutation) GetType() (r show.Type, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Show entity.
// If the Show object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShowMutation) OldType(ctx context.Context) (v show.Type, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *ShowMutation) ResetType() {
	m._type = nil
}

// SetAddedDate sets the "addedDate" field.
func (m *ShowMutation) SetAddedDate(t time.Time) {
	m.addedDate = &t
}

// AddedDate returns the value of the "addedDate" field in the mutation.
func (m *ShowMutation) AddedDate() (r time.Time, exists bool) {
	v := m.addedDate
	if v == nil {
		return
	}
	return *v, true
}

// OldAddedDate returns the old "addedDate" field's value of the Show entity.
// If the Show object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShowMutation) OldAddedDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAddedDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAddedDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddedDate: %w", err)
	}
	return oldValue.AddedDate, nil
}

// ResetAddedDate resets all changes to the "addedDate" field.
func (m *ShowMutation) ResetAddedDate() {
	m.addedDate = nil
}

// Where appends a list predicates to the ShowMutation builder.
func (m *ShowMutation) Where(ps ...predicate.Show) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ShowMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ShowMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Show, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ShowMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ShowMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Show).
func (m *ShowMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ShowMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.name != nil {
		fields = append(fields, show.FieldName)
	}
	if m._order != nil {
		fields = append(fields, show.FieldOrder)
	}
	if m._type != nil {
		fields = append(fields, show.FieldType)
	}
	if m.addedDate != nil {
		fields = append(fields, show.FieldAddedDate)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ShowMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case show.FieldName:
		return m.Name()
	case show.FieldOrder:
		return m.Order()
	case show.FieldType:
		return m.GetType()
	case show.FieldAddedDate:
		return m.AddedDate()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ShowMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case show.FieldName:
		return m.OldName(ctx)
	case show.FieldOrder:
		return m.OldOrder(ctx)
	case show.FieldType:
		return m.OldType(ctx)
	case show.FieldAddedDate:
		return m.OldAddedDate(ctx)
	}
	return nil, fmt.Errorf("unknown Show field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ShowMutation) SetField(name string, value ent.Value) error {
	switch name {
	case show.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case show.FieldOrder:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrder(v)
		return nil
	case show.FieldType:
		v, ok := value.(show.Type)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case show.FieldAddedDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddedDate(v)
		return nil
	}
	return fmt.Errorf("unknown Show field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ShowMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ShowMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ShowMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Show numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ShowMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ShowMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ShowMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Show nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ShowMutation) ResetField(name string) error {
	switch name {
	case show.FieldName:
		m.ResetName()
		return nil
	case show.FieldOrder:
		m.ResetOrder()
		return nil
	case show.FieldType:
		m.ResetType()
		return nil
	case show.FieldAddedDate:
		m.ResetAddedDate()
		return nil
	}
	return fmt.Errorf("unknown Show field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ShowMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ShowMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ShowMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ShowMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ShowMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ShowMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ShowMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Show unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ShowMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Show edge %s", name)
}
