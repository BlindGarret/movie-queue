// Code generated by ent, DO NOT EDIT.

package show

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/BlindGarret/movie-queue/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Show {
	return predicate.Show(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Show {
	return predicate.Show(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Show {
	return predicate.Show(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Show {
	return predicate.Show(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Show {
	return predicate.Show(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Show {
	return predicate.Show(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Show {
	return predicate.Show(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Show {
	return predicate.Show(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Show {
	return predicate.Show(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Show {
	return predicate.Show(sql.FieldEQ(FieldName, v))
}

// Order applies equality check predicate on the "order" field. It's identical to OrderEQ.
func Order(v string) predicate.Show {
	return predicate.Show(sql.FieldEQ(FieldOrder, v))
}

// AddedDate applies equality check predicate on the "addedDate" field. It's identical to AddedDateEQ.
func AddedDate(v time.Time) predicate.Show {
	return predicate.Show(sql.FieldEQ(FieldAddedDate, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Show {
	return predicate.Show(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Show {
	return predicate.Show(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Show {
	return predicate.Show(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Show {
	return predicate.Show(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Show {
	return predicate.Show(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Show {
	return predicate.Show(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Show {
	return predicate.Show(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Show {
	return predicate.Show(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Show {
	return predicate.Show(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Show {
	return predicate.Show(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Show {
	return predicate.Show(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Show {
	return predicate.Show(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Show {
	return predicate.Show(sql.FieldContainsFold(FieldName, v))
}

// OrderEQ applies the EQ predicate on the "order" field.
func OrderEQ(v string) predicate.Show {
	return predicate.Show(sql.FieldEQ(FieldOrder, v))
}

// OrderNEQ applies the NEQ predicate on the "order" field.
func OrderNEQ(v string) predicate.Show {
	return predicate.Show(sql.FieldNEQ(FieldOrder, v))
}

// OrderIn applies the In predicate on the "order" field.
func OrderIn(vs ...string) predicate.Show {
	return predicate.Show(sql.FieldIn(FieldOrder, vs...))
}

// OrderNotIn applies the NotIn predicate on the "order" field.
func OrderNotIn(vs ...string) predicate.Show {
	return predicate.Show(sql.FieldNotIn(FieldOrder, vs...))
}

// OrderGT applies the GT predicate on the "order" field.
func OrderGT(v string) predicate.Show {
	return predicate.Show(sql.FieldGT(FieldOrder, v))
}

// OrderGTE applies the GTE predicate on the "order" field.
func OrderGTE(v string) predicate.Show {
	return predicate.Show(sql.FieldGTE(FieldOrder, v))
}

// OrderLT applies the LT predicate on the "order" field.
func OrderLT(v string) predicate.Show {
	return predicate.Show(sql.FieldLT(FieldOrder, v))
}

// OrderLTE applies the LTE predicate on the "order" field.
func OrderLTE(v string) predicate.Show {
	return predicate.Show(sql.FieldLTE(FieldOrder, v))
}

// OrderContains applies the Contains predicate on the "order" field.
func OrderContains(v string) predicate.Show {
	return predicate.Show(sql.FieldContains(FieldOrder, v))
}

// OrderHasPrefix applies the HasPrefix predicate on the "order" field.
func OrderHasPrefix(v string) predicate.Show {
	return predicate.Show(sql.FieldHasPrefix(FieldOrder, v))
}

// OrderHasSuffix applies the HasSuffix predicate on the "order" field.
func OrderHasSuffix(v string) predicate.Show {
	return predicate.Show(sql.FieldHasSuffix(FieldOrder, v))
}

// OrderEqualFold applies the EqualFold predicate on the "order" field.
func OrderEqualFold(v string) predicate.Show {
	return predicate.Show(sql.FieldEqualFold(FieldOrder, v))
}

// OrderContainsFold applies the ContainsFold predicate on the "order" field.
func OrderContainsFold(v string) predicate.Show {
	return predicate.Show(sql.FieldContainsFold(FieldOrder, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v Type) predicate.Show {
	return predicate.Show(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v Type) predicate.Show {
	return predicate.Show(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...Type) predicate.Show {
	return predicate.Show(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...Type) predicate.Show {
	return predicate.Show(sql.FieldNotIn(FieldType, vs...))
}

// AddedDateEQ applies the EQ predicate on the "addedDate" field.
func AddedDateEQ(v time.Time) predicate.Show {
	return predicate.Show(sql.FieldEQ(FieldAddedDate, v))
}

// AddedDateNEQ applies the NEQ predicate on the "addedDate" field.
func AddedDateNEQ(v time.Time) predicate.Show {
	return predicate.Show(sql.FieldNEQ(FieldAddedDate, v))
}

// AddedDateIn applies the In predicate on the "addedDate" field.
func AddedDateIn(vs ...time.Time) predicate.Show {
	return predicate.Show(sql.FieldIn(FieldAddedDate, vs...))
}

// AddedDateNotIn applies the NotIn predicate on the "addedDate" field.
func AddedDateNotIn(vs ...time.Time) predicate.Show {
	return predicate.Show(sql.FieldNotIn(FieldAddedDate, vs...))
}

// AddedDateGT applies the GT predicate on the "addedDate" field.
func AddedDateGT(v time.Time) predicate.Show {
	return predicate.Show(sql.FieldGT(FieldAddedDate, v))
}

// AddedDateGTE applies the GTE predicate on the "addedDate" field.
func AddedDateGTE(v time.Time) predicate.Show {
	return predicate.Show(sql.FieldGTE(FieldAddedDate, v))
}

// AddedDateLT applies the LT predicate on the "addedDate" field.
func AddedDateLT(v time.Time) predicate.Show {
	return predicate.Show(sql.FieldLT(FieldAddedDate, v))
}

// AddedDateLTE applies the LTE predicate on the "addedDate" field.
func AddedDateLTE(v time.Time) predicate.Show {
	return predicate.Show(sql.FieldLTE(FieldAddedDate, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Show) predicate.Show {
	return predicate.Show(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Show) predicate.Show {
	return predicate.Show(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Show) predicate.Show {
	return predicate.Show(sql.NotPredicates(p))
}
