// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/BlindGarret/movie-queue/ent/rank"
)

// RankCreate is the builder for creating a Rank entity.
type RankCreate struct {
	config
	mutation *RankMutation
	hooks    []Hook
}

// SetNext sets the "next" field.
func (rc *RankCreate) SetNext(s string) *RankCreate {
	rc.mutation.SetNext(s)
	return rc
}

// SetNillableNext sets the "next" field if the given value is not nil.
func (rc *RankCreate) SetNillableNext(s *string) *RankCreate {
	if s != nil {
		rc.SetNext(*s)
	}
	return rc
}

// Mutation returns the RankMutation object of the builder.
func (rc *RankCreate) Mutation() *RankMutation {
	return rc.mutation
}

// Save creates the Rank in the database.
func (rc *RankCreate) Save(ctx context.Context) (*Rank, error) {
	rc.defaults()
	return withHooks(ctx, rc.sqlSave, rc.mutation, rc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rc *RankCreate) SaveX(ctx context.Context) *Rank {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rc *RankCreate) Exec(ctx context.Context) error {
	_, err := rc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rc *RankCreate) ExecX(ctx context.Context) {
	if err := rc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rc *RankCreate) defaults() {
	if _, ok := rc.mutation.Next(); !ok {
		v := rank.DefaultNext
		rc.mutation.SetNext(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rc *RankCreate) check() error {
	if _, ok := rc.mutation.Next(); !ok {
		return &ValidationError{Name: "next", err: errors.New(`ent: missing required field "Rank.next"`)}
	}
	return nil
}

func (rc *RankCreate) sqlSave(ctx context.Context) (*Rank, error) {
	if err := rc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	rc.mutation.id = &_node.ID
	rc.mutation.done = true
	return _node, nil
}

func (rc *RankCreate) createSpec() (*Rank, *sqlgraph.CreateSpec) {
	var (
		_node = &Rank{config: rc.config}
		_spec = sqlgraph.NewCreateSpec(rank.Table, sqlgraph.NewFieldSpec(rank.FieldID, field.TypeInt))
	)
	if value, ok := rc.mutation.Next(); ok {
		_spec.SetField(rank.FieldNext, field.TypeString, value)
		_node.Next = value
	}
	return _node, _spec
}

// RankCreateBulk is the builder for creating many Rank entities in bulk.
type RankCreateBulk struct {
	config
	err      error
	builders []*RankCreate
}

// Save creates the Rank entities in the database.
func (rcb *RankCreateBulk) Save(ctx context.Context) ([]*Rank, error) {
	if rcb.err != nil {
		return nil, rcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Rank, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RankMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcb *RankCreateBulk) SaveX(ctx context.Context) []*Rank {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcb *RankCreateBulk) Exec(ctx context.Context) error {
	_, err := rcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcb *RankCreateBulk) ExecX(ctx context.Context) {
	if err := rcb.Exec(ctx); err != nil {
		panic(err)
	}
}
